Vererbung           INHERITANCE
Aufgabe: Shapes
Wir implementieren ein Programm, in dem wir auf einer Fl√§che Formen repr√§sentieren k√∂nnen.

Eine Form(Shape) ist eine abstrakte Klasse und hat einige Eigenschaften:

color beinhaltet den Farbcode f√ºr die Darstellung
isFilled ist ein boolscher Wert der ausdr√ºckt ob die Form ausgef√ºllt wird oder nicht.
Jede Form hat au√üerdem zwei Methoden

public abstract double getArea() gibt die Fl√§che einer Form zur√ºck
public abstract double getPerimeter() gibt den Umfang einer Form zur√ºck
Wir implementieren einige konkrete Formen.


Circle
Ein Kreis hat als zus√§tzliche Eigenschaft einen radius und erweitert die Shape Klasse. Durch die Erweiterung muss der Kreis alle Methoden von Form implementieren, die dort als abstrakt definiert werden. Ist der Radius negativ oder null soll eine IllegalArgumentException geworfen werden.

üí° Es gibt eine Konstante f√ºr PI in Math.PI definiert.


Rectangle
Ein Rechteck hat als zus√§tzliche Eigenschaften eine 'width' und 'length' und erweitert wie die Kreis Klasse die Form und muss dadurch ebenfalls die 'getArea' und 'getPerimeter' Methode implementieren. Sind Breite oder L√§nge negativ oder null soll eine 'IllegalArgumentException' geworfen werden.


Square
Ein Quadrat ist im Prinzip nur eine spezielle Art von Rechteck - ein Rechteck dessen Breite und L√§nge den gleichen Wert haben.


Tests
Am besten w√§re es, wenn du f√ºr jede konkrete, instanzierbare (=nicht abstrakt) Klasse, also Circle, Rectangle und Square eine Testklasse erzeugst und die Umfangs- und Fl√§chenberechnung f√ºr 2 verschiedene Beispiele pro Klasse testet. Schreibe au√üerdem Tests, welche verifizieren dass bei √úbergabe einer negativen Zahl oder null eine IllegalArgumentException geworfen wird.

implement a test program Main.java, that creates several instances and prints area and perimeter practice rigorous information hiding: all members should be private unless you really really need them not to be. your test code should exhibit the principles of polymorphism, e.g. write Shape s = new Rectangle(4.0, 4.5) rather thanRectangle r = new Rectangle(...) the number pi is defined in Math.PI

